extend schema
@link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@external", "@shareable", "@extends"])

type Meta @shareable{
    page: Int!,
    totalCount: Int!,
    pageSize: Int!,
    totalPages: Int!,
    hasNext: Boolean!,
    hasPrevious: Boolean!
}
scalar Date
scalar LocalDateTime

input Pagination{
    offset: Int,
    limit: Int
}

enum ActivityLevel {SEDENTARY, LOW, MODERATE, HIGH, VERY_HIGH}
enum Gender {MALE, FEMALE}
enum Goal {LOSE, MAINTAIN, GAIN}
enum MeasurementUnit {GRAMS, MILLILITERS, PIECES}
enum MealType {BREAKFAST, LUNCH, DINNER, FIRST_SNACK, SECOND_SNACK, THIRD_SNACK}
enum EventType {DELETED, CREATED_UPDATED}

type Brand{
    id: ID!,
    name: String!,
    description: String
}

input BrandInput{
    name: String!,
    description: String
}

type BrandPage{
    content: [Brand]!,
    meta: Meta!
}


type User @key(fields: "id"){
    id: ID! @external
}


type Product{
    id: ID!,
    name: String!,
    barcode: String,
    proteins: Float!,
    fats: Float!,
    carbohydrates: Float!,
    water: Float!,
    salt: Float!,
    sugar: Float!,
    fiber: Float!,
    alcohol: Float!,
    description: String,
    calories: Int!,
    measurementUnit: MeasurementUnit!,
    brand: Brand,
    archived: Boolean
}

input ProductInput{
    name: String!,
    barcode: String,
    proteins: Float!,
    fats: Float!,
    carbohydrates: Float!,
    water: Float!,
    salt: Float!,
    sugar: Float!,
    fiber: Float!,
    alcohol: Float!,
    description: String,
    calories: Int!,
    measurementUnit: MeasurementUnit!,
    brandId: ID!
}

type ProductPage{
    content: [Product!],
    meta: Meta
}

input RecordInput  {
    mealType: MealType!,
    productRecords: [ProductRecordInput!]!
}

type ProductRecord{
    product: Product!,
    quantity: Float!
}

input ProductRecordInput {
    productId: ID!,
    quantity: Float!
}

type Record{
    id: ID!,
    mealType: MealType!,
    consumedAt: LocalDateTime!,
    products: [ProductRecord!],
    caloriesConsumed: Int!,
    totalQuantity: Float!,
    totalProteins: Float!,
    totalFats: Float!,
    totalCarbohydrates: Float!
}

type RecordEvent{
    record: Record,
    id: ID!,
    eventType: EventType!,
    when: LocalDateTime
}

type RecordPage{
    content: [Record!],
    meta: Meta
}

type Query{
    brand(id: ID!): Brand
    brands(pagination: Pagination): BrandPage
    brandByName(name: String!): Brand

    products(name: String, pagination: Pagination): ProductPage
    product(id: ID!): Product

    record(userId: ID!, id: ID!): Record
    records(userId: ID!, date: Date, pagination: Pagination): RecordPage
}

type Mutation{


    createBrand(input: BrandInput!): Brand,
    updateBrand(id: ID!, input: BrandInput!): Brand
    deleteBrand(id: ID!): Boolean

    createProduct(input: ProductInput!): Product
    updateProduct(id: ID!, input: ProductInput!): Product
    deleteProduct(id: ID!): Boolean

    createRecord(userId: ID!, input: RecordInput!): Record
    updateRecord(id: ID!,  userId: ID!, input: RecordInput!): Record
    deleteRecord(id: ID!, userId: ID!): Boolean
}

type Subscription {
    recordEvents: RecordEvent!
}